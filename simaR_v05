# Copyright (C) 2017 Jacinto Benhadi Mar√≠n

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details at http://www.gnu.org/licenses/.

################### Simulation function ######################
simData<-function(x,y,z) {  
  # x: an object (table) of two columns, the first one containing the number of prey offered 
  # in each treatment and the second one containing the mean proportion of prey consumed. 
  # items for each corresponding initial prey density.
  # y: number of samples per N to be simulated.
  # z: number of curves (replicates) to be simulated.
  
  # Creating an intermediate data.frame to allocate columns of simulated data; 1 column = 1 initial prey density #
  New_Data<-as.data.frame(matrix(nrow=y,ncol=nrow(x)))
  colnames(New_Data)<-x[,1]
  New_Curves<-list()
  
  for(j in 1:z){  #j counts each new curve#
    
    #Simulating new data; i counts each new sample#
    for (i in 1 : nrow(x)) {
      New_Data[,i]<-rbinom(y, size=x[i,1], prob=x[i,2])
    }
    
    # Reorganizing the new data in a list of data.frames #  
    New_Curves[[j]]<- data.frame("Offered"=sort(as.integer(rep(colnames(New_Data),y))),"Consumed"=stack(New_Data)[,1])
  }
  return(New_Curves)
}
######################## Test function #######################
newTests<-function(x){ 
  # x: an object containing the output of simData()
  library(frair)
  New_Test<-list()
  for(i in 1:length(x)){
    New_Test[[i]]<-frair_test(Consumed~Offered, data=x[[i]]) 
  }
  return(New_Test)
}


# Types of response in "frair" used by simaR_v06 -> new version!!! flexp now is real77 but both are implemented in simaR_v06

# Response    Replacement?  Parameters  Description                                            
# ----------  ------------  ----------  -----------------------------------------------------  
# hollingsII  Yes           X,a,h,T     Holling's original type II function                    
# rogersII    No            X,a,h,T     Roger's type II decreasing prey function               
# hassIII     Yes           X,b,c,h,T   Hassell's original type III function                   
# hassIIInr   No            X,b,c,h,T   Hassell's type III function, not assuming replacement  
# emdII       No            X,a,h,P,T   Ecological Models and Data in R type II function       
# real77      Yes           X,b,q,h,T   Flexible exponent model, assuming replacement          
# real77r     No            X,b,q,h,T   Flexible exponent model, not assuming replacement      
# flexp       Yes           X,b,q,h,T   Flexible exponent model, assuming replacement          
# flexpnr     No            X,b,q,h,T   Flexible exponent model, not assuming replacement 


###################### Fitting function ######################
getFitData<-function(x,y,z,Ne,NPred){
  # x: an object containing the output of simData()
  # y: the time of the experiment (T)
  # z: type of functional response ( see frair_responses() )
  # Ne: mean of the number of prey consumed at the highest initial prey density 
  # NPred: Number of predators for response type "emdII" 
  
  library(frair)
  options(warn=-1)
  New_Params<-list()
  
  if(z=="hollingsII") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="hollingsII",start=list(a=0.001,h=T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="rogersII"){
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="rogersII",start=list(a=0.001,h=T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="hassIII") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="hassIII",start=list(b=0.001,c=0.001,h = T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="hassIIInr") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="hassIIInr",start=list(b=0.001,c=0.001,h = T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="emdII") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="emdII",start=list(a=0.001,h = T/Ne), fixed=list(T=y,P=NPred))
    }
  }
  if(z=="flexp") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="flexp",start=list(b=0.001,q=0,h = T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="flexpnr") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="flexpnr",start=list(b=0.001,q=0,h = T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="real77") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="real77",start=list(b=0.001,q=0,h = T/Ne), fixed=list(T=y))
    }
  }
  
  if(z=="real77r") {
    for(i in 1:length(x)){
      New_Params[[i]]<-frair_fit(Consumed~Offered, data=x[[i]], response="real77r",start=list(b=0.001,q=0,h = T/Ne), fixed=list(T=y))
    }
  }
  
  return(New_Params)
}


###################### Plotting function ######################
plotCurves<-function(x,y,z){
  # x: an object containing the output of getFitData()
  # y: upper limit for the X-axis
  # z: upper limit for the Y-axis
  for(i in 1:length(x)){
    plot(x[[i]],lty=i,pch="",xlim=c(0,y),ylim=c(0,z),ylab=c(""),xlab=c(""),axes=F)
    lines(x[[i]],lty=i) 
    par(new=T)
  }
  plot(x[[1]],xlim=c(0,y),ylim=c(0,z),ylab=c("Number of prey killed (N)"),xlab=c("Initial prey density (N)"),col=0,pch="")
}

################# Maximum attack rate function ################
Max_attackRates<-function(x,y,z){
  # x: an object containing the output of clean_SimData()
  # y: the time of the experiment (T)
  # z: type of functional response ( see frair_responses() )
  
  #new data.frame for each simulated attack rate#
  simulated_attack_rates<-as.data.frame(matrix(nrow=length(x),ncol=1))
  simulated_attack_rates<-data.frame(Attack_rate=simulated_attack_rates[,1])
  
  #new data.frame for allocate the calculated maximum attack rate#
  Max_attackRates<-as.data.frame(matrix(nrow=length(x),ncol=1))
  Max_attackRates<-data.frame(Max_attack_rate=Max_attackRates[,1])
  
  if(z=="hollingsII"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[2],digits=4) #Extracting the attack rate from the frair_fit output#
    }
  }
  #Calculating the maximum attack rate for each curve (T/Th)#
  Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  
  if(z=="rogersII"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[2],digits=4) #Extracting the attack rate from the frair_fit output#
    }
  }
  #Calculating the maximum attack rate for each curve (T/Th)#
  Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  
  if(z=="emdII"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[2],digits=4) #Extracting the attack rate from the frair_fit output#
    }
  }
  #Calculating the maximum attack rate for each curve (T/Th)#
  Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  
  if(z=="hassIII"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[3],digits=4) #Extracting the attack rate from the frair_fit output#
    }
  }
  #Calculating the maximum attack rate for each curve (T/Th)#
  Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  
  if(z=="hassIIInr"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[3],digits=4) #Extracting the attack rate from the frair_fit output#
    }
    #Calculating the maximum attack rate for each curve (T/Th)#
    Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  }
  
  if(z=="real77"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[3],digits=4) #Extracting the attack rate from the frair_fit output#
    }
    #Calculating the maximum attack rate for each curve (T/Th)#
    Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  }
  
  if(z=="real77r"){
    for(i in 1:length(x)){
      simulated_attack_rates[i,]<-round(x[[i]][["fit"]]@details$par[3],digits=4) #Extracting the attack rate from the frair_fit output#
    }
    #Calculating the maximum attack rate for each curve (T/Th)#
    Max_attackRates<- round(y/simulated_attack_rates,digits=4) #Calculating the maximum attack rate for each curve (T/Th)#
  }
  #Replacing infinites by NAs, supressing them and allocating the results on the its own data.frame#
  Max_attackRates<-as.vector(na.omit(replace(Max_attackRates[,1],is.infinite(Max_attackRates[,1]),NA)))
  return(Max_attackRates)
}

############# Own_mean function for boot package ##############
own_mean<-function(x,y) { 
  # x: a vector with the means that will be used by MARbootstrapping()
  # y: a second argument required by the boot function from boot package.
  
  ### Remember, the second argument of the function "boot" needs two parameters being the second one a vector of indices.
  mean1 = mean(x[y])
}

######### Bootstrapping function from boot package ############
MARbootstrapping<-function(x,y,z,w){ 
  # x: an object containing the output of Max_attackRates()
  # y: the number of bootstrap replicates.
  # z: the confidence level of the required interval.
  # w: A vector of character strings representing the type of intervals asked by the function boot.ci from boot package: "norm","basic", "stud", "perc", "bca".
  
  library(plotrix)
  library(boot)
  boot_res<-as.vector(matrix(nrow=length(x),ncol=1))
  #bootstrapping the mean of the maximum attack rate#
  boot_res<-boot(x, own_mean, R = y)
  
  #extracting the lower and upper limit of the confidence interval#
  return(data.frame(li=as.vector(boot.ci(boot_res, conf=z, type=w)[[4]])[2],ui=as.vector(boot.ci(boot_res, conf=0.95, type="norm")[[4]])[3]))
}

